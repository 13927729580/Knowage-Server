#set($dataFields = $data.metaData.fields) ## columns of data table
#set($dataColumnsMapper = {})

#foreach ($dataField in $dataFields) ## conversion column name to internal column name
	#if($dataField.class.name == 'java.util.LinkedHashMap')
		#set($workAroundNoPrint = $dataColumnsMapper.put($dataField.header , $dataField.name))
	#end
#end

#set($rows = $data.rows) ## data in table rows


#set($series = $chart.VALUES.SERIE) ## metadata related to series

#set($seriesMap = {}) ## conversion series metadata to map object
#if($series.class.name == 'java.util.LinkedHashMap')
	#set($workAroundNoPrint = $seriesMap.put($series.name , $series))
#else
	#foreach($serie in $series)
		#set($workAroundNoPrint = $seriesMap.put($serie.name , $serie))
	#end
#end

{
    chart: {
   		type: 'gauge',

   		#if($chart.style.backgroundColor != '')
   		backgroundColor: '$chart.style.backgroundColor', ##outer chart background
    	#end
   		
   		#if($chart.height != '')
    	height:'$chart.height',
    	#end
    	
    	#if($chart.width != '')
    	width:'$chart.width',
    	#end

        plotBackgroundColor: null,
        plotBorderWidth: 0,
        plotShadow: false
    },
    
    title: {
        text: '$chart.TITLE.text',
        
        #set ($titleAlign = $chart.TITLE.style.align)
        #if ($titleAlign != '' )
        
        	#if ($titleAlign == 'left')
        	x: 70,
        	#elseif ($titleAlign == 'right')
        	x: -70,
        	#end
        
        align: '$titleAlign',
        #end
        
        style:{
        #foreach($styleName in $chart.TITLE.style.keySet())
        	#set ($axisTytleStyle = $chart.TITLE.style[$styleName])
    		#if ($styleName == 'fontWeight' && ($axisTitleStyle == 'italic' || $axisTitleStyle == 'normal'))
    			fontStyle: '$axisTitleStyle',
			#elseif($styleName == 'fontWeight' && $axisTytleStyle == 'underline')
    			textDecoration: 'underline',
			#else		        			
    			$styleName: '$axisTytleStyle',
    		#end
		#end
	    }
    },
    
    #if($chart.SUBTITLE.text != '')
    subtitle: {
        text: '$chart.SUBTITLE.text',
        
        #set ($subtitleAlign = $chart.SUBTITLE.style.align)
        #if ($subtitleAlign != '' )
        
        	#if ($subtitleAlign == 'left')
        	x: 70,
        	#elseif ($subtitleAlign == 'right')
        	x: -70,
        	#end
        
        align: '$subtitleAlign',
        #end
        
        style:{
        #foreach($styleName in $chart.SUBTITLE.style.keySet())
        	#set ($axisSubtitleStyle = $chart.SUBTITLE.style[$styleName])
    		#if ($styleName == 'fontWeight' && ($axisSubtitleStyle == 'italic' || $axisSubtitleStyle == 'normal'))
    			fontStyle: '$axisSubtitleStyle',
			#elseif($styleName == 'fontWeight' && $axisSubtitleStyle == 'underline')
    			textDecoration: 'underline',
			#else		        			
    			$styleName: '$axisSubtitleStyle',
    		#end
		#end
		}
    },
    #end
    
    pane: {    
        
    	#if($chart.PANE.startAngle)
        	startAngle: $chart.PANE.startAngle,
        #end
        #if($chart.PANE.endAngle)
        	endAngle: $chart.PANE.endAngle,
        #end
        
        background: [
        {
            backgroundColor: {
                linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                stops: [[0, '#FFF'],[1, '#333']]
            },
            borderWidth: 0,
            outerRadius: '109%'
        }, {
            backgroundColor: {
                linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                stops: [
                    [0, '#333'],
                    [1, '#FFF']
                ]
            },
            borderWidth: 1,
            outerRadius: '107%'
        }, {
            // default background
        }, {
            backgroundColor: '#DDD',
            borderWidth: 0,
            outerRadius: '105%',
            innerRadius: '103%'
        }] 
    },
    
    #set($axisList = {})
    #if($chart.AXES_LIST.AXIS.class.name == 'java.util.ArrayList')
    	#set($axisList = $chart.AXES_LIST.AXIS)
    #else
    	#set($axis = $axisList.put($axis.id , $chart.AXES_LIST.AXIS))
    #end
    
    yAxis:[
        ## Serie add
       
        #foreach ($yAxis in $axisList)   
        	#if ($yAxis.position != "bottom")
        	{    
        		min: $yAxis.min,
		        max: $yAxis.max,
		        
	        	title: {
		        	#if($yAxis.TITLE.enabled)
				 	 	enabled: $yAxis.TITLE.enabled
				 	#end
			 	 	
			 	 	#if($yAxis.TITLE.text)
	        			text: '$yAxis.TITLE.text',
	        		#end
	        		
				 	#if( $yAxis.TITLE.style )
		        		style:{
		        		
				        	#foreach($styleName in $yAxis.TITLE.style.keySet())
				        	
				        		#set ($axisTitleStyle = $yAxis.TITLE.style[$styleName])
				        		
				        		#if ($styleName == 'fontWeight' && ($axisTitleStyle == 'italic' || $axisTitleStyle == 'normal'))
				        			fontStyle: '$axisTitleStyle',
								#elseif($styleName == 'fontWeight' && $axisTitleStyle == 'underline')
				        			textDecoration: 'underline',
				        		#elseif($styleName == 'align')
				        			#set($alignTitle = $axisTitleStyle)
								#else		        			
				        			$styleName: '$axisTitleStyle',
				        		#end
				        		
				        	#end			        	
		        		},
		        		
		        		#*
			        		Mapping between alignment types provided by the alignment combo of the Y-axis Title
			        		and the alignment types provided for this item by the Highcharts library
			        		
			        		@author: danristo (danilo.ristovski@mht.net)
			        	*#				        	
			        	#if($alignTitle!="" && $alignTitle!="null")			        	
			        		#if($alignTitle == "left")
			        			align: "high",
			        		#elseif($alignTitle == "right")
			        			align: "low",
			        		#else
			        			align: "middle",
			        		#end				        		
			        	#end
		        	#end
	        	},
	        	
	        	#if($yAxis.lineColor)
	        		lineColor: '$yAxis.lineColor', ##'#339',
	            #end
	        	#if($yAxis.tickPosition)
	        		tickPosition: '$yAxis.tickPosition',
	        	#end
	            #if($yAxis.tickColor)
	            	tickColor: '$yAxis.tickColor',
	            #end
	            #if($yAxis.minorTickColor)
	            	minorTickColor: '$yAxis.minorTickColor',
	            #end
	            #if($yAxis.offset)
	            	offset: $yAxis.offset,
	            #end
	            #if($yAxis.lineWidth)
	            	lineWidth: $yAxis.lineWidth,
	            #end
	            #if($yAxis.minorTickLength)
	            	minorTickLength: $yAxis.minorTickLength,
	            #end
	            #if($yAxis.endOnTickGauge)
	            	endOnTick: $yAxis.endOnTickGauge,
	            #end
	            
	        	#if($yAxis.minorTickInterval == '')
	        		minorTickInterval: 'auto',
        		#else
        			minorTickInterval: $yAxis.minorTickInterval,
	        	#end
	        	
	        	#if($yAxis.minorTickWidth)
	            	minorTickWidth: $yAxis.minorTickWidth,
	            #end
	            
	            #if($yAxis.minorTickPosition)
	            	minorTickPosition: '$yAxis.minorTickPosition',
	            #end
	            
	            #if($yAxis.minorTickColor)
	            	minorTickColor: '$yAxis.minorTickColor',
				#end
				
				#if($yAxis.tickPixelInterval)
	            	tickPixelInterval: $yAxis.tickPixelInterval,
	            #end
	            
	            #if($yAxis.tickWidth)
	            	tickWidth: $yAxis.tickWidth,
	            #end
	            
	            #if($yAxis.tickPosition)
	            	tickPosition: '$yAxis.tickPosition',
	            #end
	            
	            #if($yAxis.tickLength)
	            	tickLength: $yAxis.tickLength,
	            #end
	            
	            #if($yAxis.tickColor)
	            	tickColor: '$yAxis.tickColor',
	        	#end
	        	
	        	#if($yAxis.LABELS)
	        	labels: {
	        		#if($yAxis.LABELS.distance)
	                	distance: $yAxis.LABELS.distance,
	            	#end
	             	#if($yAxis.LABELS.rotation)
	                	rotation: $yAxis.LABELS.rotation,
	                #end
	                
		    		#if($yAxis.style)
		        		style:{
			        	#foreach($styleName in $yAxis.style.keySet())			        	
			        		#set ($axisStyle = $yAxis.style[$styleName])
			        					        		
			        		#if ($styleName == 'fontWeight' && ($axisStyle == 'italic' || $axisStyle == 'normal'))
			        			fontStyle: '$axisStyle',
							#elseif($styleName == 'fontWeight' && $axisStyle == 'underline')
			        			textDecoration: 'underline',			        					        		
							#elseif($styleName == 'align')
			        			#set($alignLabels = $axisStyle)
							#else
			        			$styleName: '$axisStyle',
			        		#end
			        	#end
		        		},
		        		
		        		#*			        				        		
			        		Alignment for Y-axis labels.
			        		
			        		@author: danristo (danilo.ristovski@mht.net)
			        	*#				        	
			        	#if($alignLabels!="" && $alignLabels!="null")	
			        		align: "$alignLabels"		        					        				        		
			        	#end
		        		
		        	#end
	            },
	        	#end
	        	
	        	#if($yAxis.PLOTBANDS)
		        	plotBands: [        	
		        	
		        	#set($plots = $yAxis.PLOTBANDS.PLOT) 
		        	       	
		        	#if ($plots.class.name == "java.util.ArrayList")
		        	
			        	#foreach($plotElement in $plots)
		        		{
			        		#foreach($valueKey in $plotElement.keySet())
				        	
				    			#if ($valueKey == "color" && $plotElement.color)
				    				color: '$plotElement.color',
				    			#elseif ($valueKey == "from")
				    				from: $plotElement.from,
				    			#elseif ($valueKey == "to")
				    				to: $plotElement.to,
				    			#end
		        			
		        			#end
		        		},
			        	#end
			        	
			        #else
			         
			         	#if ($plots.color != "" && $plots.from != "" && $plots.to != "")
				        	{
				        		#if($plots.color != "")
				        			color: '$plots.color',
				        		#end
				        		
				        		#if($plots.from != "")
				        			from: $plots.from,
				        		#end
				        		
				        		#if($plots.to != "")
				        			to: $plots.to
				        		#end		        		
				        	},
				        #end
			        	
			        #end
		        	
		        	#*
		        	#foreach($valueKey in $yAxis.PLOTBANDS.PLOT.keySet())
		        	{
		    			#if ($valueKey == "color")
		    				color: $yAxis.PLOTBANDS.PLOT.color
		    			#end
	        			
        			},
	        		#end
		        	
		        	#if ($yAxis.PLOTBANDS.PLOT.class.name != "java.util.LinkedHashMap")
		        	
			        	#foreach($band in $yAxis.PLOTBANDS.PLOT)
			        	{
			        	
			        		from: $band.from,
			        		to: $band.to,
			        		color: '$band.color'
			        		
			        	},
			        	#end 
		        	#else
		        		{
		        			#if ($yAxis.PLOTBANDS.PLOT.from != '')
			        			from: $yAxis.PLOTBANDS.PLOT.from,
		        			#else
		        				from: '',
		        			#end
		        			
		        			#if ($yAxis.PLOTBANDS.PLOT.to != '')
			        			to: $yAxis.PLOTBANDS.PLOT.to,
		        			#else
		        				to: '',
		        			#end
		        			
		        			#if ($yAxis.PLOTBANDS.PLOT.color != '')
			        			color: $yAxis.PLOTBANDS.PLOT.color,
		        			#else
		        				color: '',
		        			#end
			        	}
		        	#end
		        	*#
		        	]
		        #end
		        },
    		#end             
        #end
        ## END Serie add
        ],

    
    series: [
    	#foreach($valueKey in $seriesMap.keySet())
	    	#set($relatedSerie = $seriesMap.get($valueKey))
	    	{
	    	name: '$relatedSerie.name',
	    	
	    	#if($relatedSerie.color)
	    	color: '$relatedSerie.color',
	    	#end
	    	
	        data: [
	    	    #set($relatedSerieColName = "$relatedSerie.column"+"_#if($relatedSerie.groupingFunction)$relatedSerie.groupingFunction#{else}SUM#end")
	    	    #set($serieColumnsMapped = $dataColumnsMapper.get($relatedSerieColName)) ## "Vendite_AVG" -> "column_5" ## "Ricavi_SUM" -> "column_6"
				
				#foreach($row in $rows)
					#set ($serieValue = $row.get($serieColumnsMapped))
					$serieValue,
				#end
	    	],
	    	
	    	dataLabels: {
	    	
	    	#* 
	    		Added second part of the if-statement ($relatedSerie.DATA_LABELS.yPositionDataLabels!="") since 
	    		we can skip specification of the y-position data label for some serie items. If not specified
	    		like this (skipping data definition for property that are not mandatory), error on browser
	    		appears since it is not possible to decode JSON out of the JSON string from the response (chart.jsp).
	    		(edited by: danristo :: danilo.ristovski@mht.net)
	    	*#
	    	#if($relatedSerie.DATA_LABELS.yPositionDataLabels && $relatedSerie.DATA_LABELS.yPositionDataLabels!="")
	    		y: $relatedSerie.DATA_LABELS.yPositionDataLabels,
	    	#end
	    	
	    	#if($relatedSerie.DATA_LABELS.colorDataLabels)
	    		color: '$relatedSerie.DATA_LABELS.colorDataLabels',
	    	#end
	    	
	    	#set($formatDataLabels = '')
	    	#set($relatedSerieShowValue = $relatedSerie.showValue)
			#if ($relatedSerieShowValue != '')
                enabled: $relatedSerieShowValue,
                
                #set ($postfixValueAsString = '')
                #if ($relatedSerie.postfixChar != '')
                    #set ($postfixValueAsString = ' ' + $relatedSerie.postfixChar)
				#end
                
                #set ($prefixValueAsString = '')
                #if ($relatedSerie.prefixChar != '')
                    #set ($prefixValueAsString = $relatedSerie.prefixChar + ' ')
				#end
                
                #set ($precisionValueAsString = '')
                #if ($relatedSerie.precision != '')
                    #set ($precisionValueAsString = ':.' + $relatedSerie.precision + 'f')
				#end
                
                #set ($formatDataLabels = ${prefixValueAsString} + '{y' + $precisionValueAsString + '}' + ${postfixValueAsString})
			#end
	    		    	
	    	#if($relatedSerie.DATA_LABELS.formatDataLabels && $relatedSerie.DATA_LABELS.formatDataLabels != '')
	    		format: '$relatedSerie.DATA_LABELS.formatDataLabels',
	    	#else
	    		format: '$formatDataLabels',
	    	#end
	    	},
	    	
        	tooltip: { 
				#set($seriePrefix = $relatedSerie.prefixChar)
				#if($seriePrefix)
					valuePrefix: '$seriePrefix',
				#end
					
				#set($seriePostfix = $relatedSerie.postfixChar)
				#if($seriePostfix)
					valueSuffix: '$seriePostfix',
				#end				
					
				#if ($relatedSerie.precision)
					valueDecimals: '$relatedSerie.precision',
				#end
				
				#if ($relatedSerie.TOOLTIP.style.fontWeight != '')
					ttFontWeight: '$relatedSerie.TOOLTIP.style.fontWeight',
				#end	
				
				#*
					If background color for the serie tooltip is not defined (empty)
					take the default value (#FCFFC5) so the tooltip can be readable 
					over the chart that stays behind it. Otherwise, take the value 
					of the background color specified by the user.				
					@author: danristo (danilo.ristovski@mht.net)
				*#
				#if ($relatedSerie.TOOLTIP.backgroundColor!="")
                	ttBackColor: '$relatedSerie.TOOLTIP.backgroundColor',
	            #else
	            	ttBackColor: '#FCFFC5',	
				#end
				
				#if ($relatedSerie.TOOLTIP.style.color != '')
					ttColor: '$relatedSerie.TOOLTIP.style.color' ,
				#end
					
				#if ($relatedSerie.TOOLTIP.style.align != '')
					ttAlign: '$relatedSerie.TOOLTIP.style.align' ,
				#end
					
				#if ($relatedSerie.TOOLTIP.style.fontFamily && $relatedSerie.TOOLTIP.style.fontFamily != '')
					ttFont: '$relatedSerie.TOOLTIP.style.fontFamily' ,	
				#end
					
				#if ($relatedSerie.TOOLTIP.style.fontWeight != '')
					ttFontWeight: '$relatedSerie.TOOLTIP.style.fontWeight',
				#end
					
				#if ($relatedSerie.TOOLTIP.style.fontSize != '')
					ttFontSize: '$relatedSerie.TOOLTIP.style.fontSize' ,
				#end		
			},	
			
			#if ($relatedSerie.DIAL.backgroundColorDial)
			dial: {
                backgroundColor: '$relatedSerie.DIAL.backgroundColorDial'
            },
            #end              
        },
	    #end
	],
    
    tooltip: {
        useHTML: true,
        backgroundColor: null,
        borderWidth: 2,
        style: {
            padding: 0
        },
        formatter: function() {		
       
        	var ttColor = this.series.tooltipOptions.ttColor ? this.series.tooltipOptions.ttColor : "";
        	var ttBackColor = this.series.tooltipOptions.ttBackColor ? this.series.tooltipOptions.ttBackColor : "";
        	
        	var ttAlign = this.series.tooltipOptions.ttAlign ? this.series.tooltipOptions.ttAlign : '';
        	var ttFont = this.series.tooltipOptions.ttFont ? ' ' + this.series.tooltipOptions.ttFont : '';
        	var ttFontSize = this.series.tooltipOptions.ttFontSize ? ' ' + this.series.tooltipOptions.ttFontSize : '';
        	var ttFontWeight = this.series.tooltipOptions.ttFontWeight ? ' ' + this.series.tooltipOptions.ttFontWeight : '';
        	            	       	
        	#*
        		Depending on font style chosen by the user for the serie tooltip
        		we will specify respective CSS attribute so it can be taken by the
        		tooltip.
        		
        		@author: danristo (danilo.ristovski@mht.net)
        	*#
        	var tooltipFontStyle = "";
        	
        	if (ttFontWeight == " underline") {
        		tooltipFontStyle = " text-decoration: underline;";
        	} else if (ttFontWeight == " italic") {
        		tooltipFontStyle = "font-style: italic;";
        	} else if (ttFontWeight == " bold") {
        		tooltipFontStyle = "font-weight: bold;";
        	} else {
        		tooltipFontStyle = "font-weight: normal;";
        	}
        	
        	var valueDecimals = this.series.tooltipOptions.valueDecimals ? this.series.tooltipOptions.valueDecimals : -1;
        	var valuePrefix = this.series.tooltipOptions.valuePrefix ? this.series.tooltipOptions.valuePrefix + ' ' : '';
        	var valueSuffix = this.series.tooltipOptions.valueSuffix ? ' ' + this.series.tooltipOptions.valueSuffix : '';
        	
        	var thisValue = this.y;
        	if(valueDecimals > -1 ) {
        		var decimalPoint = Highcharts.getOptions().lang.decimalPoint,
        			thousandsSep = Highcharts.getOptions().lang.thousandsSep;
        			
        		thisValue = Highcharts.numberFormat(thisValue, valueDecimals, decimalPoint, thousandsSep);
        	}
        	thisValue = valuePrefix + thisValue + valueSuffix;
        	
        	#*
        		Separate font elements (family, size and weight (style)) so the tooltip
        		font characteristics can be separately (independently) specified by the user.
        		@modifiedBy: danristo (danilo.ristovski@mht.net)
        	*# 
            var result = 
            	'<div style="padding:10px;color:' + ttColor + '; opacity: 0.9; background:' + ttBackColor + ';' + " font-family: " + ttFont + "; "
            					+ tooltipFontStyle + " font-size: " + ttFontSize + ';text-align:' + ttAlign + ';">'; 
            
            #*
        		Removed bold font style (weight) as default one for the serie value, since
        		style of the fonts on the tooltip will be the same for every single font
        		element on it. HTML tag <strong> is removed.
        		@modifiedBy: danristo (danilo.ristovski@mht.net)
        	*# 	
            result += this.series.name + ': ' + thisValue + '</div>';
            
            return result;
        }
    },
    
    
    #if($chart.EMPTYMESSAGE != '')
    lang: {
        noData: "$chart.EMPTYMESSAGE.text"
    },
    noData: {
    	style:{
    	#foreach($styleName in $chart.EMPTYMESSAGE.style.keySet())
    		$styleName: '$chart.EMPTYMESSAGE.style[$styleName]',
    	#end
		}
    },
    #end
    
    credits: { ##remove bottom credits text
    	enabled: false
    },
}