#set($dataFields = $data.metaData.fields) ## columns of data table
#set($dataColumnsMapper = {})

#foreach ($dataField in $dataFields) ## conversion column name to internal column name
	#if($dataField.class.name == 'java.util.LinkedHashMap')
		#set($workAroundNoPrint = $dataColumnsMapper.put($dataField.header , $dataField.name))
	#end
#end

#set($rows = $data.rows) ## data in table rows


#set($categorieColumns = $chart.VALUES.CATEGORY) ## metadata related to categories
#set($series = $chart.VALUES.SERIE) ## metadata related to series

#set($seriesMap = {}) ## conversion series metadata to map object
#foreach($serie in $series)
	#set($workAroundNoPrint = $seriesMap.put($serie.name , $serie))
#end

{
    chart: {
        type: 'line',
        backgroundColor: '$chart.style.backgroundColor', ##outer chart background
        
        #set ($chartHeight = 0)
        #if($chart.height != '')
        	#set($chartHeight = $chart.height)
        #end
        height: $chartHeight,
        
        #set ($chartWidth = 0)
        #if($chart.width != '')
        	#set($chartWidth = $chart.width)
    	#end
    	width: $chartWidth,
        
        style:{
        	#foreach($styleName in $chart.style.keySet())
        	$styleName: '$chart.style[$styleName]',
        	#end
	    },
    },
    
    colors: [
             #foreach($color in $chart.COLORSPALLET.COLOR)
             '$color.value', 
             #end
             ],
    
    title: {
        text: '$chart.TITLE.text',
        
        style:{
        	#foreach($styleName in $chart.TITLE.style.keySet())
        	$styleName: '$chart.TITLE.style[$styleName]',
        	#end
	    }, 
    },
    subtitle: {
        text: '$chart.SUBTITLE.text'
    },
    legend: {
        layout: '$chart.LEGEND.layout',
        align: '$chart.LEGEND.position',
        verticalAlign: 'top',
        floating: $chart.LEGEND.floating,
        
        #if($chart.LEGEND.floating == 'true')
        x: $chart.LEGEND.x,
        y: $chart.LEGEND.y,
        #end
        
        borderWidth: $chart.LEGEND.style.borderWidth,
        backgroundColor: '$chart.LEGEND.style.backgroundColor',
        shadow: true,
        itemStyle: { 
        	"color": "$chart.LEGEND.style.color", 
        	"fontSize": "$chart.LEGEND.style.fontSize", 
        	"fontWeight": "$chart.LEGEND.style.fontWeight" 
        }
    },

    ## Axises selection
    #set($axisList = $chart.AXES_LIST.AXIS)

    #set($xAxisList = {}) ## X Axises list container
    #set($yAxisList = {}) ## Y Axises list container
    #set($xAxisPositions = {}) ## X Axises integer positions list, for series references
    #set($yAxisPositions = {}) ## Y Axises integer positions list, for series references
    #set($xAxisCounter = 0) 
    #set($yAxisCounter = 0)
    
    #foreach($axis in $axisList)
	 	#if($axis.type == 'Category')
	 		#set($workAroundNoPrint = $xAxisList.put($axis.alias , $axis))
	 		#set($workAroundNoPrint = $xAxisPositions.put($axis.alias , $xAxisCounter))
	 		
	 		#set($xAxisCounter = $xAxisCounter + 1)
	 	#end
	 	
	 	#if($axis.type == 'Serie')
	 		#set($workAroundNoPrint = $yAxisList.put($axis.alias , $axis))
	 		#set($workAroundNoPrint = $yAxisPositions.put($axis.alias , $yAxisCounter))
	 		
	 		#set($yAxisCounter = $yAxisCounter + 1)
	 	#end
	#end
	
    xAxis:[
    	 #foreach($xAxisKey in $xAxisList.keySet())
    	 	#set ($xAxis = $xAxisList[$xAxisKey])
    	 
    	 {
			 title: {
				 text: '$xAxis.TITLE.text',
				 style:{
		        	#foreach($styleName in $xAxis.TITLE.style.keySet())
		        	$styleName: '$xAxis.TITLE.style[$styleName]',
		        	#end
			     },
			 },

			 #if($xAxis.position == 'top')
			 opposite: true,
			 #end
			 
    		 #set($categorieColumnsMapped = $dataColumnsMapper.get($categorieColumns.column)) ## "product" -> "column_3"
    		 categories:
    		 [
    		 #foreach($row in $rows)
    		 	#set ($categorie = $row.get($categorieColumnsMapped))
    		 	'$categorie', 
    		 #end
			 ],
    	 },
    	 #end
    ],
    
    yAxis: [
        ## Aggiunta serie 
        #foreach($yAxisKey in $yAxisList.keySet())
        	#set ($yAxis = $yAxisList[$yAxisKey] )
        
        {
        	min: 0,
        	title: {
        		text: '$yAxis.TITLE.text',
        		style:{
		        	#foreach($styleName in $yAxis.TITLE.style.keySet())
		        	$styleName: '$yAxis.TITLE.style[$styleName]',
		        	#end
        		},
        	},
        	
        	tickInterval: $yAxis.MAJORGRID.interval,
        	gridLineColor: '$yAxis.MAJORGRID.style.color',
        	
        	#* 
        	#set($typeline = [ 'Solid', 'ShortDash', 'ShortDot', 'ShortDashDot', 'ShortDashDotDot', 
        	                   'Dot','Dash', 'LongDash', 'DashDot', 'LongDashDot', 'LongDashDotDot'])
        	*#
        	
        	#set($typeline = $yAxis.MAJORGRID.style.typeline)
        	#if($typeline == 'dashed')
        		#set($convertedTpeline = 'Dash')
        	#end
        	gridLineDashStyle: '$convertedTpeline',
        	
        	minorTickInterval: $yAxis.MINORGRID.interval,
        	minorGridLineColor: '$yAxis.MINORGRID.style.color',
        	
        	#set($typeline = $yAxis.MINORGRID.style.typeline)
        	#if($typeline == 'dashed')
        		#set($convertedMinorTpeline = 'Dash')
        	#end
        	minorGridLineDashStyle: '$convertedMinorTpeline',
        	
        	#if($yAxis.position == 'right')
        	opposite: true,
        	#end
        	
        	stackLabels: {
        		enabled: true
        	},
        },
        #end
        ## FINE Aggiunta serie
            
    ],
    
    tooltip: {
        formatter: function () {
        	var prefixChar = this.series.options.prefixChar;
        	var postfixChar = this.series.options.postfixChar;
        	
        	var formattedTooltip = 
        		'<b>' + this.x + '</b><br/>' +
        		(prefixChar == ''? '' : prefixChar + ' ') + this.y + postfixChar + '<br/>' 
            return formattedTooltip;
        }
    },
    plotOptions: {
        column: {
	            dataLabels: {
                enabled: true,
                color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white',
                style: {
                    textShadow: '0 0 3px black'
                }
            }
        }
    },
    
	series: [
	
	#foreach($valueKey in $seriesMap.keySet())
	    #set($relatedSerie = $seriesMap.get($valueKey))
	    	
	    {	
			color: '$relatedSerie.color',
			name: '$relatedSerie.name',
			
		#set($relatedSerieType = false)
		#set($relatedSerieType = $relatedSerie.type)
		#if($relatedSerieType)		
	    	type: '$relatedSerie.type',
	    #end
			
	    	data: [
	    	    #set($serieColumnsMapped = $dataColumnsMapper.get($relatedSerie.name)) ## "Vendite" -> "column_5" ## "Ricavi" -> "column_6"
				#foreach($row in $rows)
					#set ($serieValue = $row.get($serieColumnsMapped))
					$serieValue, 
				#end
	    	],
		#set($seriePrefix = '')
		#set($seriePrefix = $relatedSerie.prefixChar)
			prefixChar: '$seriePrefix',
			
		#set($seriePostfix = '')
		#set($seriePostfix = $relatedSerie.postfixChar)
			postfixChar: '$seriePostfix',
			valueDecimals: $relatedSerie.precision ,

		#set($serieTooltip = false)
    	#set($serieTooltip = $relatedSerie.TOOLTIP)
    	#if($serieTooltip)
    		tooltip : { //created property
    			
    		},
    	#end
    	
    	#set($referencedAxis = $relatedSerie.axis)
    		yAxis: $yAxisPositions[$referencedAxis]
	    }, 
	#end
    ],
    
    lang: {
        noData: "$chart.EMPTYMESSAGE.test"
    },
    noData: {
    	style:{
    	#foreach($styleName in $chart.EMPTYMESSAGE.style.keySet())
    		$styleName: '$chart.EMPTYMESSAGE.style[$styleName]',
    	#end
		}
    },
    
    credits: { ##remove bottom credits text
    	enabled: false
    },
}