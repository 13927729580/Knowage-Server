#set($category = $chart.VALUES.CATEGORY)

#set($dataRows = $data.rows)
#set($dataFields = $data.metaData.fields) ## columns of data table
#set($dataColumnsMapper = {})

#foreach ($dataField in $dataFields) ## conversion column name to internal column name
	#if($dataField.class.name == 'java.util.LinkedHashMap')
		#set($workAroundNoPrint = $dataColumnsMapper.put($dataField.header, $dataField.name))
	#end
#end

#* 	
	For Java class of dataset transformer we need '$dataRows' (raw JSON dataset),
	'$columnsNeeded' (name of the columns for sequence) and $$dataColumnsMapper (metadata)
*#

#set($columnsNeeded = {})

#set($columnCounter = 0)
		
#foreach($value in $category)	

	#set($columnsNeeded[$columnCounter] = $value.column)
	#set($columnCounter = $columnCounter + 1)
#end

#set($serie = $chart.VALUES.SERIE.name)

#set($groupingFunction = $chart.VALUES.SERIE.groupingFunction)

{
	chart: 
	{
		type: '$chart.type',
		height: '$chart.height',				
		
		style:
		{			
			fontFamily: '$chart.style.fontFamily',
			fontSize: '$chart.style.fontSize',
			fontWeight: '$chart.style.fontWeight',					
			backgroundColor: '$chart.style.backgroundColor',			
			opacMouseOver: '$chart.style.opacMouseOver'
		}
	},
	
	emptymessage:
	{
		text: '$chart.EMPTYMESSAGE.text',		
		
		style:
		{
			align: '$chart.EMPTYMESSAGE.style.align',
			fontFamily: '$chart.EMPTYMESSAGE.style.fontFamily',
			fontWeight: '$chart.EMPTYMESSAGE.style.fontWeight',			
			fontSize: '$chart.EMPTYMESSAGE.style.fontSize',
			color: '$chart.EMPTYMESSAGE.style.color'
		}
	},
	
	title:
	{
		text: '$chart.TITLE.text',		
		
		style:
		{
			fontFamily: '$chart.TITLE.style.fontFamily',
			fontSize: '$chart.TITLE.style.fontSize',
			fontWeight: '$chart.TITLE.style.fontWeight',
			color: '$chart.TITLE.style.color',
			align: '$chart.TITLE.style.align'
		}
	},
	
	subtitle:
	{	
		text: '$chart.SUBTITLE.text',		
		
		style:
		{
			fontFamily: '$chart.SUBTITLE.style.fontFamily',
			fontWeight: '$chart.SUBTITLE.style.fontWeight',
			fontSize: '$chart.SUBTITLE.style.fontSize',
			color: '$chart.SUBTITLE.style.color',
			align: '$chart.SUBTITLE.style.align'
		}
	},
	
	#* 	Something completely new that define through XML template
		that we would like to have for the SUNBURST chart.  *# 	
	tip:
	{
		text: '$chart.TIP.text',				
				
		style:
		{	
			fontFamily: '$chart.TIP.style.fontFamily',
			fontWeight: '$chart.TIP.style.fontWeight',			
			fontSize: '$chart.TIP.style.fontSize',			
			color: '$chart.TIP.style.color',
			width: '$chart.TIP.style.width'				
		}
	},
		
	#* 	Something completely new that define through XML template
		that we would like to have for the SUNBURST chart.  *# 	
	toolbar:
	{			
		style:
		{	
			position: '$chart.TOOLBAR.style.position',
			height: '$chart.TOOLBAR.style.height',
			width: '$chart.TOOLBAR.style.width',
			spacing: '$chart.TOOLBAR.style.spacing',
			tail: '$chart.TOOLBAR.style.tail',				
			percFontColor: '$chart.TOOLBAR.style.percFontColor',		
			fontFamily: '$chart.TOOLBAR.style.fontFamily',
			fontWeight: '$chart.TOOLBAR.style.fontWeight',			
			fontSize: '$chart.TOOLBAR.style.fontSize'
		}
	},
		
	data:
	[
	 	$datasettransformer.toTree($columnsNeeded,$serie,$dataColumnsMapper,$dataRows, $groupingFunction)
	]
}