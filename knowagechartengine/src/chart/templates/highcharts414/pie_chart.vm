#set($dataFields = $data.metaData.fields) ## columns of data table
#set($dataColumnsMapper = {})

#foreach ($dataField in $dataFields) ## conversion column name to internal column name
	#if($dataField.class.name == 'java.util.LinkedHashMap')
		#set($workAroundNoPrint = $dataColumnsMapper.put($dataField.header , $dataField.name))
	#end
#end

#set($rows = $data.rows) ## data in table rows


#set($series = $chart.VALUES.SERIE) ## metadata related to series

#set($seriesMap = {}) ## conversion series metadata to map object
#if($series.class.name == 'java.util.LinkedHashMap')
	#set($workAroundNoPrint = $seriesMap.put($series.name , $series))
#else
	#foreach($serie in $series)
		#set($workAroundNoPrint = $seriesMap.put($serie.name , $serie))
	#end
#end

{
    chart: {
   		type: 'pie',

   		#if($chart.style.backgroundColor != '')
   		backgroundColor: '$chart.style.backgroundColor', ##outer chart background
    	#end
   		
   		#if($chart.height != '')
    	height:'$chart.height',
    	#end
    	
    	#if($chart.width != '')
    	width:'$chart.width',
    	#end

    	#if($chart.dimension=='3D')
    	options3d: {
                enabled: true,
                alpha: 45,
                beta: 0
            },
    	#end
    	
        borderColor: '$chart.style.backgroundColor',
        style:{
        	#foreach($styleName in $chart.style.keySet())
        	#set ($chartStyleValue = $chart.style[$styleName])
    			#if ($styleName == 'fontWeight' && ($chartStyleValue == 'italic' || $chartStyleValue == 'normal')) 
        			fontStyle: '$chartStyleValue',
				#elseif($styleName == 'fontWeight' && $chartStyleValue == 'underline')
        			textDecoration: 'underline',
				#else		        			
        			$styleName: '$chartStyleValue',
        		#end
        	#end
        },
        plotBackgroundColor: null,
        plotBorderWidth: null,
        plotShadow: false
    },
    
    colors: [
		#*
			If user specifies at least 2 colors (class name of the structure that hold data
			about colors picked in the color palette of the Designer will in this case be
			LinkedList, instead of LinkedHashMap as in other case - just one element) go 
			into the if-statement. If there are no picked color or there is just one, go
			into the else-statement.
			@author: danristo (danilo.ristovski@mht.net)
		*#
 		
 		#if ($chart.COLORPALETTE.COLOR && $chart.COLORPALETTE.COLOR.class.name != 'java.util.LinkedHashMap') 
			
			#foreach($color in $chart.COLORPALETTE.COLOR)
				'$color.value', 
			#end	
					
		#else		
			
			#*
				If user does not specify any color inside the color palette the chart
				will take predefined value for the color (#518BC6) (else-case).	Otherwise, 
				we will take the single value specified in the palette (if-case).
				@author: danristo (danilo.ristovski@mht.net)
			*#
			
			#if ($chart.COLORPALETTE.COLOR)
				'$chart.COLORPALETTE.COLOR.value'
			#else
				'#518BC6'
			#end
			
		#end
    ],
    
    
    title: {
        text: '$chart.TITLE.text',
        
        #set ($titleAlign = $chart.TITLE.style.align)
        #if ($titleAlign != '' )
        
        	#if ($titleAlign == 'left')
        	x: 70,
        	#elseif ($titleAlign == 'right')
        	x: -70,
        	#end
        
        align: '$titleAlign',
        #end
        
        style:{
        #foreach($styleName in $chart.TITLE.style.keySet())
        	#set ($axisTytleStyle = $chart.TITLE.style[$styleName])
    		#if ($styleName == 'fontWeight' && ($axisTitleStyle == 'italic' || $axisTitleStyle == 'normal'))
    			fontStyle: '$axisTitleStyle',
			#elseif($styleName == 'fontWeight' && $axisTytleStyle == 'underline')
    			textDecoration: 'underline',
			#else		        			
    			$styleName: '$axisTytleStyle',
    		#end
		#end
	    }
    },
    
    #if($chart.SUBTITLE.text != '')
    subtitle: {
        text: '$chart.SUBTITLE.text',
        
        #set ($subtitleAlign = $chart.SUBTITLE.style.align)
        #if ($subtitleAlign != '' )
        
        	#if ($subtitleAlign == 'left')
        	x: 70,
        	#elseif ($subtitleAlign == 'right')
        	x: -70,
        	#end
        
        align: '$subtitleAlign',
        #end
        
        style:{
        #foreach($styleName in $chart.SUBTITLE.style.keySet())
        	#set ($axisSubtitleStyle = $chart.SUBTITLE.style[$styleName])
    		#if ($styleName == 'fontWeight' && ($axisSubtitleStyle == 'italic' || $axisSubtitleStyle == 'normal'))
    			fontStyle: '$axisSubtitleStyle',
			#elseif($styleName == 'fontWeight' && $axisSubtitleStyle == 'underline')
    			textDecoration: 'underline',
			#else		        			
    			$styleName: '$axisSubtitleStyle',
    		#end
		#end
		}
    },
    #end
    
    legend: {
    	#if ($chart.LEGEND.show != '' && $chart.LEGEND.show == 'false')
	    enabled: false,
	    #end
        #if ($chart.LEGEND.layout != '' )
        layout: '$chart.LEGEND.layout',
        #end
        
        #if ($chart.LEGEND.position != '' )
        verticalAlign: '$chart.LEGEND.position',
        #end
        
        #if ($chart.LEGEND.position != '' )
        align: '$chart.LEGEND.style.align',
        #end
        
        #if ($chart.LEGEND.floating != '')
        floating: $chart.LEGEND.floating,
        #end
        
    	#if($chart.LEGEND.floating == 'true')
    	
        #if($chart.LEGEND.x != '')
        x: $chart.LEGEND.x,
	    #end
        
        #if($chart.LEGEND.y != '')
        y: $chart.LEGEND.y,
    	#end
    	
    	#end
        
        #if($chart.LEGEND.style.backgroundColor != '')
        backgroundColor: '$chart.LEGEND.style.backgroundColor',
        #end
        
        #if($chart.LEGEND.style.borderWidth != '')
        borderWidth: '$chart.LEGEND.style.borderWidth',
        #end
        
        
        shadow: true,
        itemStyle: { 
        	color: '$chart.LEGEND.style.color', 
        	fontSize: '$chart.LEGEND.style.fontSize', 
        	#if ($chart.LEGEND.style.fontWeight == 'italic')
        	fontStyle: 'italic',
        	#elseif ($chart.LEGEND.style.fontWeight == 'underline')
        	textDecoration: 'underline',
        	#else
        	fontWeight: '$chart.LEGEND.style.fontWeight',
        	#end
        },
         #if('$!chart.LEGEND.TITLE' != "" && '$chart.LEGEND.TITLE'!='')
         title:
		        {
		        	#if('$chart.LEGEND.TITLE.text'!='')
		        	text:'$chart.LEGEND.TITLE.text',
		        	#end
		        	
		        	style:
		        	{	
		        	 #if ($chart.LEGEND.TITLE.style.color != '')
		        		color: '$chart.LEGEND.TITLE.style.color',
		            #end
		        	##if ($chart.LEGEND.TITLE.style.align != '')
		        	##	align: '$chart.LEGEND.TITLE.style.align',
		            ##end
		            #if ($chart.LEGEND.TITLE.style.fontSize != '')	
		        		fontSize: '$chart.LEGEND.TITLE.style.fontSize', 
		        	#end
		        	#if ($chart.LEGEND.TITLE.style.fontFamily != '')
		        		fontFamily: '$chart.LEGEND.TITLE.style.fontFamily',
		        	#end
		        	
		        	#if ($chart.LEGEND.TITLE.style.fontWeight == 'italic')
		        		fontStyle: 'italic',
		        	#elseif ($chart.LEGEND.TITLE.style.fontWeight == 'underline')
		        		textDecoration: 'underline',
		        	#else
		        		fontWeight: '$chart.LEGEND.TITLE.style.fontWeight',
		        	#end
		        	}	
		        }
		 #end       
    },
    
    plotOptions: {
        pie: {
            allowPointSelect: true,
            cursor: 'pointer',
            dataLabels: {
                enabled: true,
                format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                style: {
                    color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                }
            },
            #if ($chart.LEGEND.show != '' && $chart.LEGEND.show == 'true')
            showInLegend: true
		    #end
        },
        
        series:
        {
	        #* 
	        	From Highcharts API: When a series contains a data array that is longer than this, 
	        	only one dimensional arrays of numbers, or two dimensional arrays with x and y values 
	        	are allowed. Also, only the first point is tested, and the rest are assumed to be the 
	        	same format. This saves expensive data checking and indexing in long series. Set it to 
	        	0 disable. Defaults to 1000.
	        	
	        	URL: http://api.highcharts.com/highcharts#plotOptions.series.turboThreshold
	        	
	        	We will increase this value in order to display series that contain a data array bigger
	        	than 1000 (default), because it is most likely that we will have this situation very 
	        	often.
	        	
	        	@author: danristo (danilo.ristovski@mht.net)
	        *#
	        turboThreshold: 5000
        }
    },
    
    series: [
    
	    #set ($counter = 1)
    	#foreach($valueKey in $seriesMap.keySet())
	    	#set($relatedSerie = $seriesMap.get($valueKey))
	    	{
	    	name: '$relatedSerie.name',
	    	#if($chart.isCockpitEngine == 'true' && $chart.outcomingEventsEnabled == 'true')
	    	point:
	    	{
              	events:{
                	click: handleCockpitSelection
            	}
            },
            #end
	        data: [
	    	    #set($serieColumnCategory = $dataColumnsMapper.get($chart.VALUES.CATEGORY.column))
	    	    #set($relatedSerieColName = "$relatedSerie.column"+"_#if($relatedSerie.groupingFunction)$relatedSerie.groupingFunction#{else}'SUM')#end")
	    	    #set($serieColumnsMapped = $dataColumnsMapper.get($relatedSerieColName)) ## "Vendite_AVG" -> "column_5" ## "Ricavi_SUM" -> "column_6"
				#foreach($row in $rows)
					#set ($serieName = $row.get($serieColumnCategory))
					#set ($serieValue = $row.get($serieColumnsMapped))
					{
						name: '$serieName',
						y: $serieValue,
						
						#set($relatedSerieShowValue = $relatedSerie.showValue)
						#if ($relatedSerieShowValue == true)
						dataLabels: {
		                    enabled: $relatedSerieShowValue,
		                    
		                    #set ($precisionValueAsString = '')
		                    #if ($relatedSerie.precision != '')
			                    #set ($precisionValueAsString = ':.' + $relatedSerie.precision + 'f')
							#end
							
		                    
		                    format: '<b>{point.name}</b>: {y$precisionValueAsString}'
		                }
		                #else
		                dataLabels: {
		                    enabled: true,    
		                    format: '<b>{point.name}</b>: {point.percentage:.'+$relatedSerie.precision+'f}%'
		                }
						#end
					},
				#end
	    	],
	    	
	    	#if($series.size()==2)
		        size: '50%',
		        #if($counter==1)
		        	center: ['25%', '50%'],
		        #else
		        	center: ['75%', '50%'],
		        #end
	    		#set ($counter = $counter + 1)
		    #end
		    
		    #if($series.size()==3)
		        size: '40%',
		        #if($counter==1)
		        	center: ['50%', '25%'],
		        #end
		        #if($counter==2)
		        	center: ['25%', '75%'],
		        #end
		        #if($counter==3)
		        center: ['75%', '75%'],
		        #end
	    		#set ($counter = $counter + 1)
		    #end
		    
		     #if($series.size()==4)
		        size: '35%',
		        #if($counter==1)
		        	center: ['25%', '25%'],
		        #end
		        #if($counter==2)
		        	center: ['75%', '25%'],
		        #end
		        #if($counter==3)
		        center: ['25%', '75%'],
		        #end
		        #if($counter==4)
		        center: ['75%', '75%'],
		        #end
	    		#set ($counter = $counter + 1)
		    #end
		    
		    
	        
        	tooltip: { 
			#set($seriePrefix = $relatedSerie.prefixChar)
			#if($seriePrefix != '')
				valuePrefix: '$seriePrefix',
			#end
				
			#set($seriePostfix = $relatedSerie.postfixChar)
			#if($seriePostfix != '')
				valueSuffix: '$seriePostfix',
			#end
				
			#if ($relatedSerie.precision != '')
				valueDecimals: $relatedSerie.precision ,
			#end
				
			#*
				If background color for the serie tooltip is not defined (empty)
				take the default value (#FCFFC5) so the tooltip can be readable 
				over the chart that stays behind it. Otherwise, take the value 
				of the background color specified by the user.				
				@author: danristo (danilo.ristovski@mht.net)
			*#
			#if ($relatedSerie.TOOLTIP.backgroundColor!="")
                ttBackColor: '$relatedSerie.TOOLTIP.backgroundColor',
            #else
            	ttBackColor: '#FCFFC5',	## default background color for the serie tooltip
			#end
				
			#if ($relatedSerie.TOOLTIP.style.color != '')
				ttColor: '$relatedSerie.TOOLTIP.style.color' ,
			#end
				
			#if ($relatedSerie.TOOLTIP.style.align != '')
				ttAlign: '$relatedSerie.TOOLTIP.style.align' ,
			#end
				
			#if ($relatedSerie.TOOLTIP.style.fontFamily != '')
				ttFont: '$relatedSerie.TOOLTIP.style.fontFamily' ,
			#end
				
			#if ($relatedSerie.TOOLTIP.style.fontWeight != '')
				ttFontWeight: '$relatedSerie.TOOLTIP.style.fontWeight' ,
			#end
				
			#if ($relatedSerie.TOOLTIP.style.fontSize != '')
				ttFontSize: '$relatedSerie.TOOLTIP.style.fontSize' ,
			#end
			},
        },
	    #end
	],
    
    tooltip: {
        useHTML: true,
        backgroundColor: null,
        borderWidth: 2,
        style: {
            padding: 0
        },
        formatter: function() {
        	var ttColor = this.series.tooltipOptions.ttColor ? this.series.tooltipOptions.ttColor : '';
        	var ttBackColor = this.series.tooltipOptions.ttBackColor ? this.series.tooltipOptions.ttBackColor : '';
        	
        	var ttAlign = this.series.tooltipOptions.ttAlign ? this.series.tooltipOptions.ttAlign : '';
        	var ttFont = this.series.tooltipOptions.ttFont ? ' ' + this.series.tooltipOptions.ttFont : '';
        	var ttFontSize = this.series.tooltipOptions.ttFontSize ? ' ' + this.series.tooltipOptions.ttFontSize : '';
        	var ttFontWeight = this.series.tooltipOptions.ttFontWeight ? ' ' + this.series.tooltipOptions.ttFontWeight : '';
        	
        	#*
        		Depending on font style chosen by the user for the serie tooltip
        		we will specify respective CSS attribute so it can be taken by the
        		tooltip.
        		@author: danristo (danilo.ristovski@mht.net)
        	*#
        	var tooltipFontStyle = "";
        	
        	if (ttFontWeight == " underline")
        	{
        		tooltipFontStyle = " text-decoration: underline;";
        	}
        	else if (ttFontWeight == " italic")
        	{
        		tooltipFontStyle = "font-style: italic;";
        	}
        	else if (ttFontWeight == " bold")
        	{
        		tooltipFontStyle = "font-weight: bold;";
        	}
        	else
        	{
        		tooltipFontStyle = "font-weight: normal;";
        	}
        	
        	var valueDecimals = this.series.tooltipOptions.valueDecimals ? this.series.tooltipOptions.valueDecimals : -1;
        	var valuePrefix = this.series.tooltipOptions.valuePrefix ? this.series.tooltipOptions.valuePrefix + ' ' : '';
        	var valueSuffix = this.series.tooltipOptions.valueSuffix ? ' ' + this.series.tooltipOptions.valueSuffix : '';
        	
        	var thisValue = this.y;
        	
        	if(valueDecimals > -1 ) {
        		var decimalPoint = Highcharts.getOptions().lang.decimalPoint,
        			thousandsSep = Highcharts.getOptions().lang.thousandsSep;
        			
        		thisValue = Highcharts.numberFormat(thisValue, valueDecimals, decimalPoint, thousandsSep);
        	}
        	thisValue = valuePrefix + thisValue + valueSuffix;
        	
            #*
        		Separate font elements (family, size and weight (style)) so the tooltip
        		font characteristics can be separately (independently) specified by the user.
        		@modifiedBy: danristo (danilo.ristovski@mht.net)
        	*# 
            var result = 
            	'<div style="padding:10px;color:' + ttColor + '; opacity: 0.9; background:' + ttBackColor + ';' + " font-family: " + ttFont + "; "
            					+ tooltipFontStyle + " font-size: " + ttFontSize + ';text-align:' + ttAlign + ';">'; 
            
            #*
        		Removed bold font style (weight) as default one for the serie value, since
        		style of the fonts on the tooltip will be the same for every single font
        		element on it. HTML tag <strong> is removed.
        		@modifiedBy: danristo (danilo.ristovski@mht.net)
        	*# 	
            result += '<span>' + this.key + '</span><br/>' + this.series.name + ': ' + thisValue + '</div>';
            
            return result;
        }
    },
    
    #if($chart.EMPTYMESSAGE != '')
    lang: {
        noData: "$chart.EMPTYMESSAGE.text"
    },
    noData: {
    	style:{
    	#foreach($styleName in $chart.EMPTYMESSAGE.style.keySet())
    		$styleName: '$chart.EMPTYMESSAGE.style[$styleName]',
    	#end
		}
    },
    #end
    
    credits: { ##remove bottom credits text
    	enabled: false
    },
}